import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import qs from "qs";
import { useNavigate } from "react-router-dom";

import { setCategoryId, setCurrentPage, setFilters } from '../redux/slices/filterSlice';
import { fetchPizzas } from '../redux/slices/pizzasSlice';

import Pogination from "../components/Pogination";
import Categories from '../components/Categories';
import Sort from '../components/Sort';
import PizzaBlock from '../components/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';

import { sortList } from '../components/Sort'
import { useRef } from "react";







function Home() {
    const navigate = useNavigate();

    const { items, status } = useSelector((state) => state.pizza);
    const { categoryId, sort, currentPage, searchValue } = useSelector((state) => state.filter);
    const dispatch = useDispatch();

    const isSearch = useRef(false);
    const isMounted = useRef(false);




    const getPizzas = async () => {
        let category = categoryId > 0 ? `category=${categoryId}` : '';
        let search = searchValue ? `&search=${searchValue}` : '';

        dispatch(
            fetchPizzas({
                category,
                search,
                sort,
                currentPage
            })
        )
        //–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ 
        window.scrollTo(0, 0);
    };

    const onChangePage = (number) => {
        dispatch(setCurrentPage(number))
    }

    const onChangeCategory = (id) => {
        dispatch(setCategoryId(id))
    }

    //–ï—Å–ª–∏ –∏–∑–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–¥ 1-–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–æ–Ω—è–µ–º –∏ redux'—Å–µ
    useEffect(() => {
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: sort.sortProperty,
                categoryId,
                currentPage
            });

            navigate(`?${queryString}`);
        }
        isMounted.current = true;
    }, [categoryId, sort.sortProperty, currentPage,])

    //–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ redux'—Å–µ
    useEffect(() => {
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1));

            const sort = sortList.find(obj => obj.sortProperty === params.sortProperty);

            dispatch(
                setFilters({
                    ...params,
                    sort
                }),
            );
            isSearch.current = true;
        }
    }, [])

    //–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
    useEffect(() => {
        if (!isSearch.current) {
            getPizzas();
        }

        isSearch.current = false;

    }, [categoryId, sort.sortProperty, searchValue, currentPage,]);



    const pizzas = items.map(obj => <PizzaBlock key={obj.id} {...obj} />);
    const skeleton = [...new Array(10)].map((_, index) => <Skeleton key={index} />)


    return (
        <div className="container">
            <div className="content__top">
                <Categories value={categoryId} onClickCategory={onChangeCategory} />
                <Sort />
            </div>
            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>

            {status === 'error' ? (
                <div className="content__error-info">
                    <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
                    <p>–ö —Å–æ–∂–∞–ª–∫–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</p>
                </div>
            ) : <div className="content__items">{status === 'loading' ? skeleton : pizzas}</div>}

            <Pogination currentPage={currentPage} onClickPage={onChangePage} />
        </div>
    )
}

export default Home;